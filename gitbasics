Git Basic Commands:
git --version
git config --list
git config --global user.name "Vinodh Kumar"
git config --global user.email vinodh5052@gmail.com
git config --global core.editor emacs or vim or notepad++ ==> Default Git Text Editor

For Help:<online :Freenode IRC server (irc.freenode.net)> 
git help ***config***
git ***config*** --help
man git-***config***

Initializing a repository in existing project:
$ git init  ===> This will create .git directory which has repository files.

Important List of files && directories in .git directory: 
$ ls -F1
config*      ==> project-specific configuration options
description  ==> only used by the GitWeb program
hooks/       ==> lient- or server-side hook scripts
info/        ==> .gitgnore file which will contain files thatt you dont want to track
** Below 4 are Git core parts
HEAD     ==> Branch currently checked out or working on 
objects/ ==> original content <code>
refs/    ==> pointers to commit objects in the data(branch)
index    ==> Staging area information


There are two type of files:
1. Tracked: Unmodified, Modified , Staged
2. Untracked: Remaining all which are not committed (i.r., not exist in last snapshot (every commit will be saved as snapshot))

File status cycle:
By default , when we clone all are tracked & unmodified ==> Modified ==> Staging
new file ==> Staging (no modification)
V.imp Git Commands:

1. git clone [URL of https or ssh type]
2. git add <file> ==> file added for staging
3. git status (M-Modified, A-Staged, ??- untracled)
 short cut for above is : git status -s (##), First character ==> status of working area && second ==> status of working tree
4.git diff ==> unstaged files changes i.e., difference b/w working tree and staging area
5. git diff --staged ==> difference b/w staging and last commit
   git diff --cached ==> synonym to staged
git difftool -t=vimdiff ==> for finding available tools git difftool --tool-help command

6. git commit ==> default opend editor for commit message ELSE
   git commit ** List of all files [default all staged files will be committed] ** -m ** commit message ** 
  git commit -v will show difference in the editor

  git commit -a -m 'message' ==> this will skip adding tracked files into staging and directly commits to branch

7 .removing a file from both working + staging area and will not be visible as untracked file==> git rm ** file name**
     Remove only from staging ==> git rm --cached *** file name ** 
8. MOving/renaming ==> git mv **file from** ** file to**

 

9. git log -p[patch @ each commit] -2[number of logs] ==> recent commit on top 
   git log --stat ==> number of modified + , deleted - 	 
   git log --pretty=oneline
   git log --graph
   
  -p

  Show the patch introduced with each commit.

  --stat

  Show statistics for files modified in each commit.

  --shortstat

  Display only the changed/insertions/deletions line from the --stat command.

  --name-only

  Show the list of files modified after the commit information.

  --name-status

  Show the list of files affected with added/modified/deleted information as well.

  --abbrev-commit

  Show only the first few characters of the SHA-1 checksum instead of all 40.

  --relative-date

  Display the date in a relative format (for example, "2 weeks ago") instead of using the full date format.

  --graph

  Display an ASCII graph of the branch and merge history beside the log output.

  --pretty

  Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).

-(n)

Show only the last n commits

--since, --after

Limit the commits to those made after the specified date.

--until, --before

Limit the commits to those made before the specified date.

--author

Only show commits in which the author entry matches the specified string.

--committer

Only show commits in which the committer entry matches the specified string.

--grep

Only show commits with a commit message containing the string

-S

Only show commits adding or removing code matching the string



The rules for the patterns you can put in the .gitignore file are as follows:
1.Blank lines or lines starting with # are ignored.
2.Standard glob patterns work.e.g:[0-9] (.*)
3.You can start patterns with a forward slash (/) to avoid recursivity.
4.You can end patterns with a forward slash (/) to specify a directory.
5.You can negate a pattern by starting it with an exclamation point (!)


