Git Basic Commands:
git --version
git config --list
git config --global user.name "Vinodh Kumar"
git config --global user.email vinodh5052@gmail.com
git config --global core.editor emacs or vim or notepad++ ==> Default Git Text Editor

For Help:<online :Freenode IRC server (irc.freenode.net)> 
git help ***config***
git ***config*** --help
man git-***config***

Initializing a repository in existing project:
$ git init  ===> This will create .git directory which has repository files.

Important List of files && directories in .git directory: 
$ ls -F1
config*      ==> project-specific configuration options
description  ==> only used by the GitWeb program
hooks/       ==> lient- or server-side hook scripts
info/        ==> .gitgnore file which will contain files thatt you dont want to track
** Below 4 are Git core parts
HEAD     ==> Branch currently checked out or working on 
objects/ ==> original content <code>
refs/    ==> pointers to commit objects in the data(branch)
index    ==> Staging area information


There are two type of files:
1. Tracked: Unmodified, Modified , Staged
2. Untracked: Remaining all which are not committed (i.r., not exist in last snapshot)

File status cycle:
By default , when we clone all are tracked & unmodified ==> Modified ==> Staging
new file ==> Staging (no modification)
V.imp Git Commands:

1. git clone [URL of https or ssh type]
2. git add <file> ==> file added for staging
3. git status (M-Modified, A-Staged, ??- untracled)
 short cut for above is : git status -s (##), First character ==> status of working area && second ==> status of working tree

The rules for the patterns you can put in the .gitignore file are as follows:
1.Blank lines or lines starting with # are ignored.
2.Standard glob patterns work.e.g:[0-9] (.*)
3.You can start patterns with a forward slash (/) to avoid recursivity.
4.You can end patterns with a forward slash (/) to specify a directory.
5.You can negate a pattern by starting it with an exclamation point (!)


